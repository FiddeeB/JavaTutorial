import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;
import javax.swing.text.*;
//Nödvändiga Klasser som importeras



public class TextEditor extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final Action New = null; //Skapar ett nytt document
	private JTextArea area = new JTextArea(20,120); //Arbetsområdet i programmet
	private JFileChooser dialog = new JFileChooser(System.getProperty("user.dir")); //Välja fil
	private String currentFile = "Untitled"; //
	private boolean changed = false;

public TextEditor() {
				area.setFont(new Font("Monospaced",Font.PLAIN,12)); //Sätter fonten till Monospaced med textstorlek 12
				JScrollPane scroll = new JScrollPane(area,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS); //Lägger in en vertikal och horisontal scrollbar som alltid ska visas
				add(scroll,BorderLayout.CENTER); //Säger var scrollbaren ska ligga. I detta fallet Center
				
				JMenuBar JMB = new JMenuBar(); //Lägger till en Meny
				setJMenuBar(JMB); 
				JMenu file = new JMenu("File"); //Lägger till en meny knapp som kallas File
				JMenu edit = new JMenu("Edit"); //Lägger till en meny knapp som kallas EDit
				JMB.add(file); JMB.add(edit); //Lägger till meny på slutet av menyn

file.add(New);file.add(Open);file.add(Save); //Lägger till vilka sub-meny alternativ som ska finnas under file
				file.add(Quit);file.add(SaveAs); //Samma som ovan
				file.addSeparator(); //Lägger till en separator efter menyn
				
				for(int i=0; i<4; i++) //Loop som säger att om i är 0 och att i är loopen ska upprepas om i är mindre än 4. För varje loop så ökas i med 1
					file.getItem(i).setIcon(null); 
				
				edit.add(Cut);edit.add(Copy);edit.add(Paste); //Lägger till alternativ i sub-menyn Edit
				
				edit.getItem(0).setText("Cut Out"); //Säger att CutOut ska vara först i listan och att alternativet ska visas med texten Cutout
				edit.getItem(1).setText("Copy"); // Copy ska vara nummer 2 i listan text ska vara Copy
				edit.getItem(2).setText("Paste"); // Paste ska vara nummer 3 i listan oh text ska vara paste

JToolBar tool = new JToolBar(); //Lägger till en toolbar
				add(tool,BorderLayout.NORTH); //Säger att toolbaren ska ligga i NORTH
				tool.add(New);tool.add(Open);tool.add(Save); //Säger att vad toolbaren ska ha för alternativ
				tool.addSeparator(); //Lägger till en separator
				
				JButton cut = tool.add(Cut), cop = tool.add(Copy),pas = tool.add(Paste); //Lägger till knappar under menyn
				
				cut.setText(null); cut.setIcon(new ImageIcon("cut.gif")); //Säger vilken bild som ska visas vid varje knapp och säger att det inte ska visas någon text
				cop.setText(null); cop.setIcon(new ImageIcon("copy.gif")); //Samma som ovan
				pas.setText(null); pas.setIcon(new ImageIcon("paste.gif")); //Samma som ovan
				
				Save.setEnabled(false); //??
				SaveAs.setEnabled(false); //??
				
				setDefaultCloseOperation(EXIT_ON_CLOSE); //Säger vad som ska hända när användaren stänger programmet
				pack(); //Anpassar fönstrett för att alla funktioner ska få plats i det
				area.addKeyListener(k1); //Gör så att man kan använda tangentbord i "area"
				setTitle(currentFile); //Sätter titeln på fönstret till titeln på filen man använder
				setVisible(true); 
}
private KeyListener k1 = new KeyAdapter() {
	public void keyPressed(KeyEvent e) {
		changed = true;
		Save.setEnabled(true);
		SaveAs.setEnabled(true);
	}
};
Action SaveAs = new AbstractAction("Save as...") { //Gör så att knappen SaveAs gör något när man trycker på det
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public void actionPerformed(ActionEvent e) {  //Sparar filen om någon klickar på knappen
		saveFileAs();
	}
};
Action Open = new AbstractAction("Open", new ImageIcon("open.gif")) { //Samma som på på Saveas men här säger den att det finns en bild
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public void actionPerformed(ActionEvent e) {
		saveOld();
		if(dialog.showOpenDialog(null)==JFileChooser.APPROVE_OPTION) { 
			readInFile(dialog.getSelectedFile().getAbsolutePath()); //Öppnar en ruta med en filutforskare
		}
		SaveAs.setEnabled(true);
	}
};
Action Save = new AbstractAction("Save", new ImageIcon("save.gif")) { //Samma som ovan
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public void actionPerformed(ActionEvent e) {
		if(!currentFile.equals("Untitled"))
			saveFile(currentFile);
		else
			saveFileAs();
	}
};				
Action Quit = new AbstractAction("Quit") {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public void actionPerformed(ActionEvent e) {
		saveOld();
		System.exit(0);
	}
};
ActionMap m = area.getActionMap();
	Action Cut = m.get(DefaultEditorKit.cutAction);
	Action Copy = m.get(DefaultEditorKit.copyAction);
	Action Paste = m.get(DefaultEditorKit.pasteAction);

private void saveFileAs() {
	if(dialog.showSaveDialog(null)==JFileChooser.APPROVE_OPTION)
		saveFile(dialog.getSelectedFile().getAbsolutePath());
}
private void saveOld() {
	if(changed) {
		if(JOptionPane.showConfirmDialog(this, "Would you like to save "+ currentFile +" ?","Save",JOptionPane.YES_NO_OPTION)== JOptionPane.YES_OPTION)
			saveFile(currentFile);
	}
	
}
private void readInFile(String fileName) {
	try {
		FileReader r = new FileReader(fileName);
		area.read(r, null);
		r.close();
		currentFile = fileName;
		setTitle(currentFile);
		changed = false;
	}
	catch(IOException e) {
		Toolkit.getDefaultToolkit().beep();
		JOptionPane.showMessageDialog(this,"Editor can't find the file called "+fileName);		
	}
}
private void saveFile(String fileName) {
	try {
		FileWriter w = new FileWriter(fileName);
		area.write(w);
		w.close();
		currentFile = fileName;
		setTitle(currentFile);
		changed = false;
		Save.setEnabled(false);
	}
	catch(IOException e) {		
	}
}
public static void main(String[] arg) {
	new TextEditor();
}
public KeyListener getK1() {
	return k1;
}
public void setK1(KeyListener k1) {
	this.k1 = k1;
}
				
				
				
}


